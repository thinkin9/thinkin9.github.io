---
layout: post
title:  "Bitmask"
date:   2020-07-03 21:04:47 +0900
categories: Algorithm_and_Problem_Solving
---

<div style="text-align: center"><i><b>Last Updated on July 3rd, 2020</b></i></div>

참고: [마이구미의 HelloWorld](https://mygumi.tistory.com/361)

## Why do we use Bitmask?
<hr style="height: 2px; border:none; margin-top: -1em; margin-bottom:0.5em; padding: 0; background:black">

* Bit is the least unit of data to express binary number in computer   
* Computer represent the number via bits   
* bits representing specific number doesn't overlap to each other
(e.g. 1 = 0000001, 2 = 00000010)   
* Thus, Bitmask is effective method when we consider some cases from 0 to 2<sup>n</sup>-1   
→ Minimize occupied memory and reduce overhead   
→ Each bits represents one of cases from 0 to 2<sup>n</sup>-1

## Operations
<hr style="height: 2px; border:none; margin-top: -1em; margin-bottom:0.5em; padding: 0; background:black">

* & (AND)
* &#124; (OR)
* ^ (XOR)
* ~ (NOT)
* A << B, A × 2<sup>B</sup>, 직관적으로 A비트에 (<<) 방향으로 추가적인 B개의 0 bits를 채운다
* A >> B, A ÷ 2<sup>B</sup>, 직관적으로 A비트에 (<<) 방향으로 추가적인 B개의 0 bits를 채운다

## More about operation 
<hr style="height: 2px; border:none; margin-top: -1em; margin-bottom:0.5em; padding: 0; background:black">

* 어떻게 비트 연산을 통해 삽입, 삭제, 조회를 할 수 있는가?   
1010 로 표현하고 있을 때, i번째 비트의 값을 1로 어떻게 변경할 수 있을까?   
i = 2 이라고 가정할 때, 결과는 1110 을 원한다.   
2번째 비트를 1로 변경할 수 있는 방법은 다음과 같다.   
    ```cpp
    1010 | 1 << 2
    1010 | 0100 => 1110
    ```   

* 반대로 2 번째 비트의 값을 0로 어떻게 변경할 수 있을까?   
    ```cpp
    1110 & ~1 << 2
    1110 & 1011 => 1010
    ```   

* AND 연산과 NOT 연산을 활용할 수 있다.   
그리고 i번째 비트의 값을 알 수 있는 방법은 다음과 같다.   
    ```cpp
    A & (1 << i)
    1010 & (1 << 2) // 1010 & 0100 => 0   
    1010 & (1 << 3) // 1010 & 1000 => 1   
    ```

## Implementation
<hr style="height: 2px; border:none; margin-top: -1em; margin-bottom:0.5em; padding: 0; background:black">

* 2<sup>n</sup>가지의 탐색이 필요할 때
    ```cpp
    for (int i = 0; i < (1<<n); i++) { 
        statements
    }
    ```

* 2<sup>n</sup>가지의 부분집합의 탐색이 필요할 때
    ```cpp
    for (int i = 0; i < (1 << num); i++) {
        for (int j = 0; j < num; j++) {
            if ((i & (1 << j))) {  // Detection for which bit is 1
                cout << "i: " << i << " j: " << j << ' ';
            }
        }
        cout << '\n';
    }
    ```